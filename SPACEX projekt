from abc import ABC, abstractmethod

class SpaceVehicleBase(ABC):
    @abstractmethod
    def launch_sequence(self):
        pass

class Rocket(SpaceVehicleBase):
    def __init__(self, thrust_power):
        self._fuel_level = 100  
        self.thrust_power = thrust_power

    def get_fuel_level(self):
        return self._fuel_level

    def set_fuel_level(self, level):
        if 0 <= level <= 100:
            self._fuel_level = level

    def launch_sequence(self):
        if self._fuel_level > 0:
            print(f"Rakieta startuje z mocą ciągu {self.thrust_power}! Kod startowy: {LAUNCH_CODE}")
        else:
            print("Brak paliwa! Start niemożliwy.")


class Person:
    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name
    
    def report_status(self):
        return f"{self.first_name} {self.last_name}: Gotowy do misji."


class MissionMember:
    def report_status(self):
        return "Członek misji: Sprawdzam systemy."


from people.person import Person
from utilities.mission_member import MissionMember

class StudentEngineer(Person, MissionMember):
    def __init__(self, first_name, last_name, specialization):
        super().__init__(first_name, last_name)
        self.specialization = specialization


LAUNCH_CODE = "XH-2024"


from entities.space_vehicle import Rocket
from people.student_engineer import StudentEngineer
from utilities.constants import LAUNCH_CODE

def main():
    print(f"Kod startowy misji: {LAUNCH_CODE}")
    
    rakieta = Rocket(thrust_power=5000)
    rakieta.set_fuel_level(80)  
    
    student = StudentEngineer("Jan", "Kowalski", "Mechanika")
    print(student.report_status())  
    
    rakieta.launch_sequence()
    
if __name__ == "__main__":
    main()
